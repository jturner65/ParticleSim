// generated by Fast Light User Interface Designer (fluid) version 1.0103

#include "phylterui.h"
#include "PhylterGLWindow.h"
#include "PhyltersBox.h"
#include "PhylterData.h"
#include "Model.h"
#include "KeyframeData.h"
#include "AnalyzerWindow.h"
#include "DofFileInfo.h"
#include "UtilFuncs.h"
#include "FlyingSeg.h"

inline void PhylterUI::cb_mCommandLine_inp_i(Fl_Input* o, void* v) {
  CommandLine_cb(o, v);
}
void PhylterUI::cb_mCommandLine_inp(Fl_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mCommandLine_inp_i(o,v);
}

inline void PhylterUI::cb_mFrame_sli_i(Fl_Value_Slider* o, void* v) {
  Frame_cb(o, v);
}
void PhylterUI::cb_mFrame_sli(Fl_Value_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mFrame_sli_i(o,v);
}

inline void PhylterUI::cb_mBegin_sli_i(Fl_Value_Slider* o, void* v) {
  Begin_cb(o, v);
}
void PhylterUI::cb_mBegin_sli(Fl_Value_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mBegin_sli_i(o,v);
}

inline void PhylterUI::cb_mEnd_sli_i(Fl_Value_Slider* o, void* v) {
  End_cb(o, v);
}
void PhylterUI::cb_mEnd_sli(Fl_Value_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mEnd_sli_i(o,v);
}

inline void PhylterUI::cb_mLoop_but_i(Fl_Button* o, void* v) {
  Loop_cb(o, v);
}
void PhylterUI::cb_mLoop_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mLoop_but_i(o,v);
}

inline void PhylterUI::cb_mFrameCounter_cou_i(Fl_Counter* o, void* v) {
  FrameCounter_cb(o, v);
}
void PhylterUI::cb_mFrameCounter_cou(Fl_Counter* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mFrameCounter_cou_i(o,v);
}

inline void PhylterUI::cb_mPlay_but_i(Fl_Button* o, void* v) {
  PlayStop_cb(o, v);
}
void PhylterUI::cb_mPlay_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mPlay_but_i(o,v);
}

inline void PhylterUI::cb_mSpeed_rol_i(Fl_Roller* o, void* v) {
  Speed_cb(o, v);
}
void PhylterUI::cb_mSpeed_rol(Fl_Roller* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mSpeed_rol_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_terminate[] = {
"32 32 -3 1",
"!\0\0\0\"\300\300\300#\200\200\200",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"",
"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"",
"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"",
"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"!!!!!!!!!!!!!!!\"\"!!!!\"\"\"\"\"\"",
"\"\"\"\"\"!\"\"\"\"\"!\"\"\"\"\"!\"!!!!\"\"!!\"\"\"\"\"",
"\"\"\"\"!!\"\"\"\"\"\"!\"\"\"!\"\"\"\"!!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"!!\"\"\"\"\"\"\"!\"!\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"!!!!!!!!!!!!!\"\"\"!!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!!\"!\"\"!!!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"!!!!!\"!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"!!\"\"\"!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"!!\"!!!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"!!!!\"!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"!!\"!!!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"!!!!!\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"\"",
"\"\"\"\"!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#\""
};
static Fl_Pixmap image_terminate(idata_terminate);

inline void PhylterUI::cb_Load_i(Fl_Menu_* o, void* v) {
  DefaultModel_cb(o, v);
}
void PhylterUI::cb_Load(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

inline void PhylterUI::cb_Load1_i(Fl_Menu_* o, void* v) {
  Model_cb(o, v);
}
void PhylterUI::cb_Load1(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

inline void PhylterUI::cb_Load2_i(Fl_Menu_* o, void* v) {
  Motion_cb(o, v);
}
void PhylterUI::cb_Load2(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

inline void PhylterUI::cb_Load3_i(Fl_Menu_* o, void* v) {
  Constr_cb(o, v);
}
void PhylterUI::cb_Load3(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Load3_i(o,v);
}

inline void PhylterUI::cb_Save_i(Fl_Menu_* o, void* v) {
  SaveMotion_cb(o, v);
}
void PhylterUI::cb_Save(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

inline void PhylterUI::cb_Save1_i(Fl_Menu_* o, void* v) {
  SaveConstr_cb(o, v);
}
void PhylterUI::cb_Save1(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

inline void PhylterUI::cb_E_i(Fl_Menu_* o, void* v) {
  Exit_cb(o, v);
}
void PhylterUI::cb_E(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_E_i(o,v);
}

inline void PhylterUI::cb_Keyframe_i(Fl_Menu_* o, void* v) {
  KeyframeSetting_cb(o, v);
}
void PhylterUI::cb_Keyframe(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Keyframe_i(o,v);
}

inline void PhylterUI::cb_Set_i(Fl_Menu_* o, void* v) {
  SelectKey_cb(o, v);
}
void PhylterUI::cb_Set(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Set_i(o,v);
}

inline void PhylterUI::cb_Delete_i(Fl_Menu_* o, void* v) {
  DeleteKey_cb(o, v);
}
void PhylterUI::cb_Delete(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Delete_i(o,v);
}

inline void PhylterUI::cb_Record_i(Fl_Menu_* o, void* v) {
  RecordMotion_cb(o, v);
}
void PhylterUI::cb_Record(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Record_i(o,v);
}

inline void PhylterUI::cb_Still_i(Fl_Menu_* o, void* v) {
  StillShot_cb(o, v);
}
void PhylterUI::cb_Still(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Still_i(o,v);
}

inline void PhylterUI::cb_mShowModel_ite_i(Fl_Menu_* o, void* v) {
  ShowModel_ite_cb(o, v);
}
void PhylterUI::cb_mShowModel_ite(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mShowModel_ite_i(o,v);
}

inline void PhylterUI::cb_mShowConstr_ite_i(Fl_Menu_* o, void* v) {
  ShowConstr_ite_cb(o, v);
}
void PhylterUI::cb_mShowConstr_ite(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mShowConstr_ite_i(o,v);
}

inline void PhylterUI::cb_mShowMarker_ite_i(Fl_Menu_* o, void* v) {
  ShowMarker_ite_cb(o, v);
}
void PhylterUI::cb_mShowMarker_ite(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mShowMarker_ite_i(o,v);
}

inline void PhylterUI::cb_Sliders_i(Fl_Menu_* o, void* v) {
  ShowSliders_cb(o, v);
}
void PhylterUI::cb_Sliders(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Sliders_i(o,v);
}

inline void PhylterUI::cb_Interactive_i(Fl_Menu_* o, void* v) {
  Interact_cb(o, v);
}
void PhylterUI::cb_Interactive(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Interactive_i(o,v);
}

inline void PhylterUI::cb_Solve_i(Fl_Menu_* o, void* v) {
  Spacetime_cb(o, v);
}
void PhylterUI::cb_Solve(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Solve_i(o,v);
}

inline void PhylterUI::cb_Terminate_i(Fl_Menu_* o, void* v) {
  Terminate_cb(o, v);
}
void PhylterUI::cb_Terminate(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Terminate_i(o,v);
}

inline void PhylterUI::cb_Preprocess_i(Fl_Menu_* o, void* v) {
  Preprocess_cb(o, v);
}
void PhylterUI::cb_Preprocess(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_Preprocess_i(o,v);
}

inline void PhylterUI::cb_mContent_ite_i(Fl_Menu_* o, void* v) {
  Content_cb(o, v);
}
void PhylterUI::cb_mContent_ite(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mContent_ite_i(o,v);
}

inline void PhylterUI::cb_About_i(Fl_Menu_* o, void* v) {
  About_cb(o, v);
}
void PhylterUI::cb_About(Fl_Menu_* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item PhylterUI::menu_[] = {
 {"&Files", 0,  0, 0, 64, 0, 0, 13, 56},
 {"Load &Default", 0x40064,  (Fl_Callback*)PhylterUI::cb_Load, 0, 0, 0, 0, 13, 56},
 {"Load &Model", 0x4006d,  (Fl_Callback*)PhylterUI::cb_Load1, 0, 0, 0, 0, 13, 56},
 {"Load &Keyframe", 0x4006b,  (Fl_Callback*)PhylterUI::cb_Load2, 0, 0, 0, 0, 13, 56},
 {"Load &Constraints", 0x40063,  (Fl_Callback*)PhylterUI::cb_Load3, 0, 128, 0, 0, 13, 56},
 {"Save Keyframe", 0x40073,  (Fl_Callback*)PhylterUI::cb_Save, 0, 0, 0, 0, 13, 56},
 {"Save Constraints", 0,  (Fl_Callback*)PhylterUI::cb_Save1, 0, 128, 0, 0, 13, 56},
 {"E&xit", 0x40078,  (Fl_Callback*)PhylterUI::cb_E, 0, 0, 0, 0, 13, 56},
 {0},
 {"&Edit", 0,  0, 0, 64, 0, 0, 13, 56},
 {"Keyframe Setting", 0,  (Fl_Callback*)PhylterUI::cb_Keyframe, 0, 0, 0, 0, 13, 56},
 {"&Set Key", 0xc0073,  (Fl_Callback*)PhylterUI::cb_Set, 0, 0, 0, 0, 13, 56},
 {"&Delete Key", 0xc0064,  (Fl_Callback*)PhylterUI::cb_Delete, 0, 128, 0, 0, 13, 56},
 {"Record Motion", 0,  (Fl_Callback*)PhylterUI::cb_Record, 0, 0, 0, 0, 13, 56},
 {"Still Sh&ot", 0x4006f,  (Fl_Callback*)PhylterUI::cb_Still, 0, 0, 0, 0, 13, 56},
 {0},
 {"&View", 0,  0, 0, 64, 0, 0, 13, 56},
 {"Show Model", 0,  (Fl_Callback*)PhylterUI::cb_mShowModel_ite, 0, 2, 0, 0, 13, 56},
 {"Show Constraints", 0,  (Fl_Callback*)PhylterUI::cb_mShowConstr_ite, 0, 2, 0, 0, 13, 56},
 {"Show Markers", 0,  (Fl_Callback*)PhylterUI::cb_mShowMarker_ite, 0, 130, 0, 0, 13, 56},
 {"Sliders", 0,  (Fl_Callback*)PhylterUI::cb_Sliders, 0, 0, 0, 0, 13, 56},
 {"&Graphs Reset", 0x40067,  0, 0, 0, 0, 0, 13, 56},
 {0},
 {"&Phylters", 0,  0, 0, 64, 0, 0, 13, 56},
 {"&Interactive", 0x40069,  (Fl_Callback*)PhylterUI::cb_Interactive, 0, 130, 0, 0, 13, 56},
 {"Solve Spacetime", 0,  (Fl_Callback*)PhylterUI::cb_Solve, 0, 0, 0, 0, 13, 56},
 {"&Terminate", 0x40074,  (Fl_Callback*)PhylterUI::cb_Terminate, 0, 0, 0, 0, 13, 56},
 {"Clear Constraints", 0,  0, 0, 128, 0, 0, 13, 56},
 {"Preprocess", 0,  (Fl_Callback*)PhylterUI::cb_Preprocess, 0, 0, 0, 0, 13, 56},
 {"Estimate Alpha", 0,  0, 0, 0, 0, 0, 13, 56},
 {0},
 {"&Controls", 0,  0, 0, 64, 0, 0, 13, 56},
 {"&Play/Stop", 0x40070,  0, 0, 0, 0, 0, 13, 56},
 {"Loop", 0,  0, 0, 0, 0, 0, 13, 56},
 {"&Forward", 0x40066,  0, 0, 0, 0, 0, 13, 56},
 {"&Backward", 0x40062,  0, 0, 0, 0, 0, 13, 56},
 {0},
 {"&Help", 0,  0, 0, 64, 0, 0, 13, 56},
 {"Contents", 0,  (Fl_Callback*)PhylterUI::cb_mContent_ite, 0, 0, 0, 0, 13, 56},
 {"About", 0,  (Fl_Callback*)PhylterUI::cb_About, 0, 0, 0, 0, 13, 56},
 {0},
 {0}
};
Fl_Menu_Item* PhylterUI::mShowModel_ite = PhylterUI::menu_ + 17;
Fl_Menu_Item* PhylterUI::mShowConstr_ite = PhylterUI::menu_ + 18;
Fl_Menu_Item* PhylterUI::mShowMarker_ite = PhylterUI::menu_ + 19;
Fl_Menu_Item* PhylterUI::mContent_ite = PhylterUI::menu_ + 38;

inline void PhylterUI::cb_mDefault_but_i(Fl_Button* o, void* v) {
  DefaultModel_cb(o, v);
}
void PhylterUI::cb_mDefault_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mDefault_but_i(o,v);
}

static const char *idata_default[] = {
"28 28 -17 1",
" \312\342\377!\377\377\377\"\314\231\0#\377\377\231$\377\314\0%f3\0&\377\377\
\0\'\377\231\0(\0\0\0)\377\377""3*\314""f\0+ff3,\314""3\0-\0\0w.f\231\377/3f\
\377""0\0""3\231",
"                            ",
"          %%%%%%%           ",
"          &!&$$$\'           ",
"      %%%%%%%%%%%%%%%       ",
"     %$&&!!#&&&&&&&$\'(      ",
"     %\'$$))$$$$$$$$\'*(      ",
"     %\'$$))$$$$$$$$\'*(      ",
"     %\'$$))$$$$$$$$\'*(      ",
"     %\'$$)%%$$$%($$\'*(      ",
"     %\'$$))$*$*$$$$\'*(      ",
"     %\'$$)(%$$$%($$\'*(      ",
"     %\'$$))$$$$$$$$\'*(      ",
"     %\'$$))$$$$$$$$\'*(      ",
"     %\'$$))$\'\'\'$$$$\'*(      ",
"     %\'$$)),,,,,$$$\'*(      ",
"     %\'$$))$*,*$$$$\'*(      ",
"     %*\"\"$$\"\"\"\"\"\"\"\"*%(      ",
"        (\'\'\'\'\'\'\'\'\'(         ",
"        ($$)!)$$$$(         ",
"     -----------------      ",
"   --.////////////////((    ",
"  --/0(+++0000000+++(0-((   ",
" -/-/0(+++0000000+++(0-(0(  ",
" -//00(+++(00000(+++(00--(  ",
"-/0/0(++++++(((++++++(0--0( ",
"/0-00(+++++++++++++++(00(-0(",
"00-00(+++++++++++++++(00(-0(",
"00-000(+++++++++++++(000(-00"
};
static Fl_Pixmap image_default(idata_default);

inline void PhylterUI::cb_mModel_but_i(Fl_Button* o, void* v) {
  Model_cb(o, v);
}
void PhylterUI::cb_mModel_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mModel_but_i(o,v);
}

static const char *idata_model[] = {
"28 28 -20 1",
" \312\342\377!\377\377\377\"f3\0#\377\377\0$\377\314\0%\377\231\0&\0\0\0\'\
\377\377\231(\377\377""3)\314""f\0*\314\231\0+DDD,\377\314\231-3\0\0.\"\"\"/\
\356\356\356""0\314\231""f1\231""f32\314\314\314""3\231\231\231",
"                            ",
"          \"\"\"\"\"\"\"           ",
"          #!#$$$%           ",
"      \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"       ",
"     \"$##!!\'#######$%&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \"%$$(($$$$$$$$%)&      ",
"     \")**$$********)\"&      ",
"        &%%%%%%%%%&         ",
"        &$$(!($$$$&         ",
"     \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"      ",
"   +\",,,,,,,,,,,,,,,,,-.    ",
"  +\",000000000000000001-.   ",
" +/\",000000000000000001-2.  ",
" +/,000000000000000000013.  ",
"+/3,0000000000000000000132. ",
"/2\"000000000000000000000-32.",
"23\"000000000000000000000-32.",
"23\"000000000000000000000-322"
};
static Fl_Pixmap image_model(idata_model);

inline void PhylterUI::cb_mMotion_but_i(Fl_Button* o, void* v) {
  Motion_cb(o, v);
}
void PhylterUI::cb_mMotion_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mMotion_but_i(o,v);
}

static const char *idata_keyframe[] = {
"28 28 -23 1",
" \312\342\377!\0\0\0\"DDD#UUU$\230""2\0%\314\231\0&\314""e\0\'\377\314""3(f\
\0\0)\231\314\377*\313\377\377+\0v\0,2\313""e-\0\230""e.f\377""3/\313\377""e03\
\377""f1\375\313\0""2\375\0""e33\231""e42\230\313""522\313""6\230""e\377",
"                            ",
"      !!!                   ",
"    !!%%%!                  ",
"   !&&&&\'\'%%!!              ",
"   !&&&&&&\'%%%!!            ",
"   !&($$&&&\'\'%%%!           ",
"   !&$%)$$&&&\'\'%%!!         ",
"   !&$%)))$&&&&\'\'%%!!       ",
"   !&$%)*))$$&&&&\'%%%!!     ",
"   !&$%))*)))$$&&&\'\'%%%!    ",
"   !&$%)+,))))))*$&&&&%(!   ",
"   !&$%,+-,),-))))$$&&%$!   ",
"   !&$%.,-,++++,-)))%&%$!   ",
"   !&$%/0,-,+,,++,**%&%$!   ",
"   !&$%0.2+-,-++,+))%&%$!   ",
"   !&$%0/21,++,-+-*)%&%$!   ",
"   !&$%.0/0343++-+,)%&%$!   ",
"   !&&\'%%./036543366%&%$!   ",
"   !&&&\'\'%0//4665643%&%$!   ",
"    !!&&&\'%%06546354%&%$!   ",
"     #!!&&\'\'%%635666%&%$!   ",
"       #!!&&\'\'%%6545%&%$!   ",
"         #!&&&\'\'%364%&%$!   ",
"          #!!&&&\'%%5%&%$!   ",
"              #!!&&\'%&%$!\"# ",
"                #!&&&&%$!\"\"#",
"                 #!!&&%(\"\"# ",
"                   #!!!!##  "
};
static Fl_Pixmap image_keyframe(idata_keyframe);

inline void PhylterUI::cb_mConstr_but_i(Fl_Button* o, void* v) {
  Constr_cb(o, v);
}
void PhylterUI::cb_mConstr_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mConstr_but_i(o,v);
}

static const char *idata_constr[] = {
"30 30 -12 1",
" \312\342\377!\0\0\0\"\231""3\0#\314""3\0$f3\0%\377\377\231&\377\231\0\'\377""\
3\0(\377""f\0)\377\314""3*3\0\0+\377\377\314",
"                              ",
"              !!              ",
"             !\"#!             ",
"             !$$!             ",
"            !%\"\"#!            ",
"            !%&\'#!            ",
"            !%&\'#!            ",
"           !%&(\'##!           ",
"           !%&(\'##!           ",
"           !)&(\'##!           ",
"           !)&(\'##!           ",
"          !%&&(\'##\"!          ",
"          !%&&(###\"!          ",
"          !%&((###\"!          ",
"          !)&(\'###\"!          ",
"          !)&(\'###\"!          ",
"         !)&&(####\"\"!         ",
"         !)&&(####\"\"!         ",
"         !)&((####\"\"!         ",
"        !#)&(\'####\"$!!        ",
"       !(#)&(\'####\"$*#!       ",
"     !!((#)&(\'###\"$**##!!     ",
"   !&+((((((##$$**##\'((\'#$!   ",
"   !!&+(((((((((((((((#\"$!!   ",
"     !!+)(((((((((((\'#$!!     ",
"       !&)&(((((((\'#\"$!       ",
"        !!&&&(((\'#\"$!!        ",
"          !!&&\'#\"$!!          ",
"            !!#\"!!            ",
"              !!              "
};
static Fl_Pixmap image_constr(idata_constr);

inline void PhylterUI::cb_mSaveMotion_but_i(Fl_Button* o, void* v) {
  SaveMotion_cb(o, v);
}
void PhylterUI::cb_mSaveMotion_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mSaveMotion_but_i(o,v);
}

static const char *idata_savekeyframe[] = {
"28 28 -13 1",
" \312\342\377!\377\377\377\"\0\0\0#UUU$\273\273\273%www&\231\0\0\'\0""3\231(\
\0""f\314)3f\377*f\231\377+\231\314\377,3f\314",
"                            ",
"    \'((                     ",
"   \'))\'((                   ",
"   \")*\'++*((                ",
"   \")*\'**+**((              ",
"   \")*\'\'!*++**((            ",
"   \")*\'\'$!**++**(           ",
"   \")*\'\'!$!!**++*((         ",
"   \")*\'\'$!$$!!***(\'(        ",
"   \")*\'\'!$!!$$!!*()\'\'       ",
"   \")*\'\'\"$!!$$!!\'())\'\'      ",
"   \")*\'\'\"\"$$!!$$\'())\'\'      ",
"   \")*\'\'\",\"\"$$!!\'())\'\'      ",
"   \")*\'\'\"\"$%\"\"$$\'\'))\'\'      ",
"   \")*\'*\'\'\"%$$\"\"\"())\'\'      ",
"   \")*\')**\'\"\"%$&\"\'))\'\'      ",
"   \")*\')))*\'\'\"\"&\"\'))\'\'      ",
"   \")*\'))))))**\'\'\'))\'\'      ",
"    \"*\'))))))))**\'))\'\'      ",
"    \"*\')\'))))))))\'))\'\'      ",
"     \"\')\'!)))))))\'))\'\'      ",
"      \")\'$%%)))))\'))\'\'      ",
"       \"\"$$%%#)))\'))\'\'##    ",
"         \"%$%#)))\'))\'\'###   ",
"            \"\")))\'))\'\'##    ",
"              \"\")\')\"\"#      ",
"                \"\"\"         ",
"                            "
};
static Fl_Pixmap image_savekeyframe(idata_savekeyframe);

inline void PhylterUI::cb_mSaveConstr_but_i(Fl_Button* o, void* v) {
  SaveConstr_cb(o, v);
}
void PhylterUI::cb_mSaveConstr_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mSaveConstr_but_i(o,v);
}

static const char *idata_saveconstr[] = {
"28 28 -12 1",
" \312\342\377!\377\377\377\"\0\0\0#UUU$\273\273\273%www&\231\0\0\'\314\0\0(\
\377\231\231)\314""33*3f\314+f\0\0",
"                            ",
"    +&&                     ",
"   +\'\'+&&                   ",
"   \"\')+(()&&                ",
"   \"\')+))())&&              ",
"   \"\')++!)(())&&            ",
"   \"\')++$!))(())&           ",
"   \"\')++!$!!))(()&&         ",
"   \"\')++$!$$!!)))&+&        ",
"   \"\')++!$!!$$!!&&\'++       ",
"   \"\')++\"$!!$$!!+&\'\'++      ",
"   \"\')++\"\"$$!!$$+&\'\'++      ",
"   \"\')++\"*\"\"$$!!+&\'\'++      ",
"   \"\')++\"\"$%\"\"$$++\'\'++      ",
"   \"\')+)++\"%$$\"\"\"&\'\'++      ",
"   \"\')+\'))+\"\"%$&\"+\'\'++      ",
"   \"\')+\'\'\')++\"\"&\"+\'\'++      ",
"   \"\')+\'\'\'\'\'\'))+++\'\'++      ",
"    \")+\'\'\'\'\'\'\'\'))+\'\'++      ",
"    \")+\'+\'\'\'\'\'\'\'\'+\'\'++      ",
"     \"+\'+!\'\'\'\'\'\'\'+\'\'++      ",
"      \"\'+$%%\'\'\'\'\'+\'\'++      ",
"       \"\"$$%%#\'\'\'+\'\'++##    ",
"         \"%$%#\'\'\'+\'\'++###   ",
"            \"\"\'\'\'+\'\'++##    ",
"              \"\"\'+\'\"\"#      ",
"                \"\"\"         ",
"                            "
};
static Fl_Pixmap image_saveconstr(idata_saveconstr);

inline void PhylterUI::cb_mSelectKey_but_i(Fl_Button* o, void* v) {
  SelectKey_cb(o, v);
}
void PhylterUI::cb_mSelectKey_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mSelectKey_but_i(o,v);
}

static const char *idata_key[] = {
"28 28 -5 1",
" \312\342\377!\0\0\0\"\231""f\0#\377\314\0$f3\0",
"                            ",
"                            ",
"                     !!!    ",
"                    !##\"!   ",
"                   !##!$!   ",
"                   #!  !\"!  ",
"                   #!  !\"!  ",
"                   #!  !\"!  ",
"                  !!   !\"!  ",
"                 !!!   #$!  ",
"               !!##!   \"$!  ",
"              !#$\"\"!   !$!  ",
"           !##\"\"! !!   !#!  ",
"         !!#\"\"!!   \"!  !#!  ",
"        !\"$\"!!     \"!  #!   ",
"      !!#\"$!       !\"!!$!   ",
"   !!#\"\"!!          !!!     ",
"  !##\"!!                    ",
" !#\"\"!$!                    ",
"  !!$\"$!                    ",
"   !\"#$$!                   ",
"   !#!!$!                   ",
"   !# !$!                   ",
"  !$! !                     ",
"  !$!                       ",
"  !!                        ",
"                            ",
"                            "
};
static Fl_Pixmap image_key(idata_key);

inline void PhylterUI::cb_mDeleteKey_but_i(Fl_Button* o, void* v) {
  DeleteKey_cb(o, v);
}
void PhylterUI::cb_mDeleteKey_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mDeleteKey_but_i(o,v);
}

static const char *idata_trash[] = {
"32 32 -16 1",
" \200\0\0!\0\0\0\"UUU#\231\231\231$\335\335\335%\"\"\"&DDD\'\377\377\377(333)\
\300\300\300*fff+\240\240\244,www-\314\314\314.33f/\377\373\360",
"                                ",
"             !!                 ",
"          \"!!#$%                ",
"         &&&&%&\'!!&             ",
"       &&#$&#%%(#!#!&#          ",
"     &&)$$\'&%&)*#!+##&!         ",
"    &+)$\'\'\'\'$))*!%,+##\"&        ",
"    &)$\'\'\'\'\'\'\'\'%&&,#+#,!        ",
"    &,$\'\'\'\'\'\'$$#,,,#+#\"!        ",
"    &,#$\'\'\'\'\'$$-)++##&&!        ",
"    &#$)))$\'\'$$))#\"\"\"\"&!        ",
"    &#$$$$)))+##,****\"&!        ",
"    .%&$$\'\'$$)++#,***%!,        ",
"     &,\"*)$$$)++#,\"((&!         ",
"     &+))##*&&&(((\"\"\"&!         ",
"     &+++\'$$$))+#,,,,&!         ",
"     &+,+$\')+)/+*+++%&!         ",
"     &+,+$\',++$#,,+,%\"!%%%      ",
"     &+,+$\',++$#,,+,%\"!%%%%%    ",
"     &+,+$\',++$#,,+,%\"!%%%%%%   ",
"     &+,+$\',++$#,,+,%\"!%%%%%%%  ",
"     &+,+$\',++$#,,+,%\"!%%%%%%%% ",
"     &+,+$\',++$#,,+,%\"!%%%%%%%% ",
"     &+,+$\',++$#,,+,%\"!%%%%%%%% ",
"     &+,+$\',++$#,,+,%\"!%%%%%%%% ",
"     &+,+$\',++$#,,+,%\"!%%%%%%%% ",
"     &+++$\',++$#,,+,\"\"!%%%%%%%  ",
"     &++$$\',++$#,,+,,\"!%%%%%    ",
"     %,$$\'\'\',$$)\"++,\"&!%%%      ",
"      %!+\'\'$$$$++##,!!%%        ",
"        \"!,++))+,!%!%%          ",
"          .%!!!!%%%%            "
};
static Fl_Pixmap image_trash(idata_trash);

inline void PhylterUI::cb_mRecordMotion_but_i(Fl_Button* o, void* v) {
  RecordMotion_cb(o, v);
}
void PhylterUI::cb_mRecordMotion_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mRecordMotion_but_i(o,v);
}

static const char *idata_record[] = {
"26 26 -5 1",
" \377\0\377!\0\0\0\"\377\377\377#\306\306\306$\204\204\204",
"                          ",
"       !!!!!!!!           ",
"      !\"\"#####$!          ",
"    !!!!!!!!!!!!!!!     !!",
"!! !#\"\"\"\"\"\"\"\"\"\"\"\"\"$    !!!",
"!\"!!\"#!!!!!!!!!!##$   !\"!!",
"!#$!\"#\"$$$$$$\"$!##$\"\"\"#\"!!",
"!$!!\"##$$$$$$#$!##$#####!!",
"!! !\"#\"##!!!!!!!!!!!$$$#!!",
"   !\"#!!!\"#########$!!$#!!",
"   !\"####$$$$$$$$$$$! !$!!",
"   !\"####!!!!!!!!!!!   !!!",
"   !$$$$$$$$$$$$$$$     !!",
"    !!!!!!!!!!!!!!!       ",
"       !$\"#$$$!           ",
"        !!!!!!            ",
"        !!#!$!            ",
"       !\"!#!!#!           ",
"       !#!#!!$!           ",
"      !#! !#!!$!          ",
"      \"!  !#!#!#          ",
"      #!  !#!#!$          ",
"     !!    !#! !!         ",
"    !#     !#! $!         ",
"     !     !$!            ",
"           $!!            "
};
static Fl_Pixmap image_record(idata_record);

inline void PhylterUI::cb_mStillShot_but_i(Fl_Button* o, void* v) {
  StillShot_cb(o, v);
}
void PhylterUI::cb_mStillShot_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mStillShot_but_i(o,v);
}

static const char *idata_still[] = {
"28 28 -11 1",
" \312\342\377!\0\0\0\"\231\231\231#fff$\314\314\314%3\0\0&333\'f33(\377\377\
\0)\231\231\0*\314\314\0",
"                            ",
"                            ",
"    !!!!!!                  ",
"  !\"!####!\"!%%  %!!         ",
" !\"$\"!!!!&$$!%  \' \'!!       ",
" !!$\"\"##&&$!!%%\'% \'  !!     ",
" !&!&&&&&&!&!%%%\'\'\'  \' !    ",
" !(&!!!!!!&&!%%\'%\'\'\'\'\' \'    ",
" !((&&&&&&&&!%%%\'\'\'\'\'\'\'\'!   ",
" !(((((**)&&!%%\'%\'\'\'\'\'\'\'\'!  ",
" !(((((**)&&!%%\'%\'\'\'\'\'\'\' \'! ",
" !(((((**)&&!%%%\'\'\'\'\'\'\'\'\'\'! ",
" !(((((**)&&!%%\'%\'\'\'\'\'\'\'\'\'! ",
" !(((((**)&&!%%%\'\'\'\'\'\'\'\'\'\'! ",
" !(((((**)&&!%  %\'\'\'\'\'\'\'\'\'! ",
" !(((((**)&&!%  \' \'\'\'\'\'\'\'\'! ",
" !(((((**)&&!!!!! \'  \'\'\'\'\'! ",
" !&((((**)&&!#     !!\' \'\'\'! ",
" !&&(((*))&&!##      !!\'\'\'! ",
" #!&&&&&&&&!###        !\'\'! ",
"  !!&&&&&&!!###          \'! ",
"  ##!!!!!!####          !\'! ",
"   ##########            !! ",
"     #####               !! ",
"                          ! ",
"                          ! ",
"                            ",
"                            "
};
static Fl_Pixmap image_still(idata_still);

inline void PhylterUI::cb_mShowModel_but_i(Fl_Button* o, void* v) {
  ShowModel_cb(o, v);
}
void PhylterUI::cb_mShowModel_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mShowModel_but_i(o,v);
}

static const char *idata_showmodel[] = {
"28 28 -8 1",
" \312\342\377!\0\0\0\"\0\272\0#\"\"\"$UUU%www&\313\313\377\'ff\314",
"                            ",
"                            ",
"   !!!!!!!!!!!!!!!!!!!!!!   ",
"   $$!!!!!!!!!!!!!!!!!!$!   ",
"   $$!\'\'\'\'\'\'\'\'!&&&&&&&!$!   ",
"   $$!\'\'\'\'!\'\'!&&!&&&&&!$!   ",
"   $$!\'\'\'\'\'\'\'!&&&&&&&&!$!   ",
"   $$!\'\'\'\'\'\'!&&&&&&&&&!$!   ",
"   $$!\'\'\'\'\'\'!&&&&&&&&&!$!   ",
"   $$!\'\'\'\'\'!&&&&&&&&&&!$!   ",
"   $$!\'\'\'\'\'!!!!&&&&&&&!$!   ",
"   $$!\'\'\'#\'\'\'\'!&&!&&&&!$!   ",
"   $$!\'\'\'\'####!!!&&&&&!$!   ",
"   $$!\'\'\'\'\'\'\'\'!&&&&&&&!$!   ",
"   $$!\'\'\'\'\'\'\'\'!&&&&&&&!$!   ",
"   $$!!!!!!!!!!!!!!!!!!$!   ",
"   $$$$$$$$$$$\"$$$$$$$$$!   ",
"   $$$$$$$$$$$$$$$$$$$$$!   ",
"   !!!!!!!!!!!!!!!!!!!!!    ",
"   %%$%$%$$%$%$%$$%$%$%$!   ",
"  !%$%$%$%%%%%%%%%$%$%$%%!  ",
" !%%%%%%%%!!!!!!!%%%%%%%%%! ",
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
"!############!!############!",
"!############!!############!",
" !!!!!!!!!!!!!!!!!!!!!!!!!! ",
"                            ",
"                            "
};
static Fl_Pixmap image_showmodel(idata_showmodel);

inline void PhylterUI::cb_mShowConstr_but_i(Fl_Button* o, void* v) {
  ShowConstr_cb(o, v);
}
void PhylterUI::cb_mShowConstr_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mShowConstr_but_i(o,v);
}

static const char *idata_showconstr[] = {
"28 28 -8 1",
" \377\377\377!\377\231\314\"\377""3f#\0\0\0$\0\272\0%www&UUU\'\"\"\"",
"                            ",
"                            ",
"   ######################   ",
"   &&##################&#   ",
"   &&#\"\"\"\"\"\"\"\"#!!!!!!!#&#   ",
"   &&#\"\"\"\"#\"\"#!!#!!!!!#&#   ",
"   &&#\"\"\"\"\"\"\"#!!!!!!!!#&#   ",
"   &&#\"\"\"\"\"\"#!!!!!!!!!#&#   ",
"   &&#\"\"\"\"\"\"#!!!!!!!!!#&#   ",
"   &&#\"\"\"\"\"#!!!!!!!!!!#&#   ",
"   &&#\"\"\"\"\"####!!!!!!!#&#   ",
"   &&#\"\"\"\'\"\"\"\"#!!#!!!!#&#   ",
"   &&#\"\"\"\"\'\'\'\'###!!!!!#&#   ",
"   &&#\"\"\"\"\"\"\"\"#!!!!!!!#&#   ",
"   &&#\"\"\"\"\"\"\"\"#!!!!!!!#&#   ",
"   &&##################&#   ",
"   &&&&&&&&&&&$&&&&&&&&&#   ",
"   &&&&&&&&&&&&&&&&&&&&&#   ",
"   #####################    ",
"   %%&%&%&&%&%&%&&%&%&%&#   ",
"  #%&%&%&%%%%%%%%%&%&%&%%#  ",
" #%%%%%%%%#######%%%%%%%%%# ",
"############################",
"#\'\'\'\'\'\'\'\'\'\'\'\'##\'\'\'\'\'\'\'\'\'\'\'\'#",
"#\'\'\'\'\'\'\'\'\'\'\'\'##\'\'\'\'\'\'\'\'\'\'\'\'#",
" ########################## ",
"                            ",
"                            "
};
static Fl_Pixmap image_showconstr(idata_showconstr);

inline void PhylterUI::cb_mShowMarker_but_i(Fl_Button* o, void* v) {
  ShowMarker_cb(o, v);
}
void PhylterUI::cb_mShowMarker_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mShowMarker_but_i(o,v);
}

static const char *idata_showmarker[] = {
"28 28 -8 1",
" \377\377\377!\0\0\0\"\17\225T#y\360\267$\0\272\0%www&UUU\'\"\"\"",
"                            ",
"                            ",
"   !!!!!!!!!!!!!!!!!!!!!!   ",
"   &&!!!!!!!!!!!!!!!!!!&!   ",
"   &&!\"\"\"\"\"\"\"\"!#######!&!   ",
"   &&!\"\"\"\"!\"\"!##!#####!&!   ",
"   &&!\"\"\"\"\"\"\"!########!&!   ",
"   &&!\"\"\"\"\"\"!#########!&!   ",
"   &&!\"\"\"\"\"\"!#########!&!   ",
"   &&!\"\"\"\"\"!##########!&!   ",
"   &&!\"\"\"\"\"!!!!#######!&!   ",
"   &&!\"\"\"\'\"\"\"\"!##!####!&!   ",
"   &&!\"\"\"\"\'\'\'\'!!!#####!&!   ",
"   &&!\"\"\"\"\"\"\"\"!#######!&!   ",
"   &&!\"\"\"\"\"\"\"\"!#######!&!   ",
"   &&!!!!!!!!!!!!!!!!!!&!   ",
"   &&&&&&&&&&&$&&&&&&&&&!   ",
"   &&&&&&&&&&&&&&&&&&&&&!   ",
"   !!!!!!!!!!!!!!!!!!!!!    ",
"   %%&%&%&&%&%&%&&%&%&%&!   ",
"  !%&%&%&%%%%%%%%%&%&%&%%!  ",
" !%%%%%%%%!!!!!!!%%%%%%%%%! ",
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
"!\'\'\'\'\'\'\'\'\'\'\'\'!!\'\'\'\'\'\'\'\'\'\'\'\'!",
"!\'\'\'\'\'\'\'\'\'\'\'\'!!\'\'\'\'\'\'\'\'\'\'\'\'!",
" !!!!!!!!!!!!!!!!!!!!!!!!!! ",
"                            ",
"                            "
};
static Fl_Pixmap image_showmarker(idata_showmarker);

inline void PhylterUI::cb_mInteract_but_i(Fl_Button* o, void* v) {
  Interact_cb(o, v);
}
void PhylterUI::cb_mInteract_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mInteract_but_i(o,v);
}

static const char *idata_interactive[] = {
"28 28 -9 1",
" \0\377\377!\0\0\231\"\0\0\0#\0\231\231$\314\314\314%\377\377\377&\231\231\
\231\'\0\377\0(\0\231\0",
" !!                         ",
" !#\"                        ",
" !##\"                       ",
"   ###\"                     ",
"   !###\"                    ",
"    !###\" ##########        ",
"     !###\"$$$$$$$$$$####    ",
"    ##!###%%%%%%%%%%$$$$##  ",
"   #$$$!##\"%%%%%%%%%%%%%$$\" ",
"   #$%$$!##\"%%%%%%%%%%%%%$\" ",
"    #$$$$%###\"%%%%%%%%%$$\"  ",
"    #%%$$$!###\"%%%%%$$$%&\"  ",
"     #%$$%$$$$$$$$$$%%%%\"   ",
"     #%$$%%%!###\"%%%%%%%\"   ",
"     #%$$%\'\'\'!###\'\'%%%%%\"   ",
"     #%$(\'\'\'\'\'!##\"\'\'\'\'%%\"   ",
"     #\'((\'\'\'\'\'\'!##\"\'\'\'\'\'\"   ",
"     #%((\'\'\'\'\'\'\'\'#((&\'\'%\"   ",
"     #\'%%\'\'\'\'\'\'\'\'(#((%%\'\"   ",
"     #\'((%%&&&&&&&%%%(&\'\"   ",
"     #\'((((%%%%%%%((#(&\'\"   ",
"     #\'((\'\'\'\'\'\'\'\'\'\'\'&&\'\'\"   ",
"     #\'((\'\'\'\'\'\'\'\'\'\'\'\'\'(\'\"   ",
"     #\'((\'\'\'\'\'\'\'\'\'\'\'\'\'$\'\"   ",
"      \"(((\'\'\'\'\'\'\'\'\'\'\'$$(    ",
"       \"(((\'\'\'\'\'\'\'\'((((\"    ",
"        \"\"((((((((((\"\"\"     ",
"          \"\"\"\"\"\"\"\"\"\"        "
};
static Fl_Pixmap image_interactive(idata_interactive);

inline void PhylterUI::cb_mSpacetime_but_i(Fl_Button* o, void* v) {
  Spacetime_cb(o, v);
}
void PhylterUI::cb_mSpacetime_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mSpacetime_but_i(o,v);
}

static const char *idata_spacetime[] = {
"28 28 -6 1",
" \300\300\300!\0\0\0\"\377\377\377#\200\200\200$\377\377\0%\200\200\0",
"                            ",
"      !!!!!!!!!!!!!!!!!     ",
"     !   \"\"       #### !    ",
"      !! \" !!!!!!!!# !!     ",
"        !  \"     #  !       ",
"        !  \"     #  !       ",
"        !  \"     #  !       ",
"        !  \"     #  !       ",
"        !  \"     %  !       ",
"        !  \"     #  !       ",
"          ! \"%%%  !         ",
"           ! \"%  !          ",
"            !   !           ",
"             ! !            ",
"             ! !            ",
"            ! % !           ",
"           !     !          ",
"         !  \"$%%   !        ",
"        !  $$%%%##  !       ",
"        ! %$$%%%##% !       ",
"        ! %$$%%%##% !       ",
"        ! %$$%%%##% !       ",
"        ! %$$%%%##% !       ",
"        !  $$%%%##  !       ",
"      !! \" #!!!!!!!# !!     ",
"     !   \"\"     #####  !    ",
"      !!!!!!!!!!!!!!!!!     ",
"                            "
};
static Fl_Pixmap image_spacetime(idata_spacetime);

inline void PhylterUI::cb_mTerminate_but_i(Fl_Button* o, void* v) {
  Terminate_cb(o, v);
}
void PhylterUI::cb_mTerminate_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mTerminate_but_i(o,v);
}

inline void PhylterUI::cb_mAbout_but_i(Fl_Button* o, void* v) {
  About_cb(o, v);
}
void PhylterUI::cb_mAbout_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mAbout_but_i(o,v);
}

static const char *idata_about[] = {
"30 30 -6 1",
" \312\342\377!\377\377\377\"\0\0\0#\262\262\262$\231\231\377%ff\314",
"                    \"\"\"\"      ",
"                   \"$$$$\"     ",
"                  \"$$$$$$\"    ",
"           ###### \"$$$%%%%\"   ",
"         ######\"\"\"\"$$$%%%%\"   ",
"        ######\"$$$\"$$%%%%%\"   ",
"       ######\"$$$$\"\"$%%%%%\"   ",
"       ######\"$$$\"$%%%\"\"\"     ",
"        #####\"$$$$\"%%%%%%\"    ",
"         ####\"$$$$$\"\"\"%%%\"    ",
"  \"\"\"\"\"\"\"\"\"\"\"\"\"%%$$$$%%%%\"    ",
"  \"!!!!!!!#####\"%%%%%%%%\"\"    ",
"  \"!!!!!!!!!!#\"\"\"%%%%%\"\"\"     ",
"   \"!!!!!!!!!#\"!\"\"\"\"\"\"!!\"     ",
"   \"!!\"\"\"\"\"\"!!\"\"\"!!!!!!!\"     ",
"   \"!!!!!!!!!!!!!!!!!!!!\"     ",
"   \"!!!!!!!!!!!!!!!!!!!!!\"    ",
"   \"!!!\"\"\"\"\"\"!!!\"\"\"\"\"\"!!!\"    ",
"   \"!!!!!!!!!!!!!!!!!!!!!\"    ",
"   \"!!!!!!\"\"\"\"!!!!!!\"\"\"\"!\"    ",
"    \"!!!!!!!!!!!!!!!!!!!!\"    ",
"    \"!\"\"\"\"\"\"!\"\"\"\"\"\"\"\"\"!!!\"    ",
"    \"!!!!!!!!!!!!!!!!!!!!!\"   ",
"    \"!!\"\"\"\"\"\"\"\"\"\"\"\"\"!!\"\"!!\"   ",
"    \"!!!!!!!!!!!!!!!!!!!!!!\"  ",
"    \"!!\"\"\"\"\"\"\"\"\"\"\"\"\"!\"\"!\"!!\"  ",
"    \"\"!!!!!!!!!!!!!!!!!!!!!!\" ",
"     \"!!!!!!!!!!!\"\"\"\"\"\"!!!!!\" ",
"     \"!!!!!!!!!!!!!!!!!!!!!!\" ",
"      \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" "
};
static Fl_Pixmap image_about(idata_about);

Fl_Menu_Item PhylterUI::menu_mPhylterList[] = {
 {"Constraints", 0,  0, 0, 2, 0, 0, 13, 15},
 {"Poses", 0,  0, 0, 6, 0, 0, 13, 15},
 {"Linear Momentum", 0,  0, 0, 6, 0, 0, 13, 15},
 {"Angular Momentum", 0,  0, 0, 6, 0, 0, 13, 15},
 {"Smoothness", 0,  0, 0, 2, 0, 0, 13, 15},
 {"Muscle Force", 0,  0, 0, 2, 0, 0, 13, 15},
 {0}
};
Fl_Menu_Item* PhylterUI::mPhConstr_item = PhylterUI::menu_mPhylterList + 0;
Fl_Menu_Item* PhylterUI::mPhPose_item = PhylterUI::menu_mPhylterList + 1;
Fl_Menu_Item* PhylterUI::mPhLin_item = PhylterUI::menu_mPhylterList + 2;
Fl_Menu_Item* PhylterUI::mPhAng_item = PhylterUI::menu_mPhylterList + 3;
Fl_Menu_Item* PhylterUI::mPhSmooth_item = PhylterUI::menu_mPhylterList + 4;
Fl_Menu_Item* PhylterUI::mPhMuscle_item = PhylterUI::menu_mPhylterList + 5;

inline void PhylterUI::cb_mFileList_i(Fl_Menu_Button* o, void* v) {
  FileList_cb(o, v);
}
void PhylterUI::cb_mFileList(Fl_Menu_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mFileList_i(o,v);
}

inline void PhylterUI::cb_mReturn_abt_but_i(Fl_Return_Button* o, void* v) {
  Return_abt_but(o, v);
}
void PhylterUI::cb_mReturn_abt_but(Fl_Return_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mReturn_abt_but_i(o,v);
}

inline void PhylterUI::cb_OK_i(Fl_Return_Button* o, void* v) {
  Return_hel_cb(o, v);
}
void PhylterUI::cb_OK(Fl_Return_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

inline void PhylterUI::cb_mSample_but_i(Fl_Light_Button* o, void* v) {
  Sample_but_cb(o, v);
}
void PhylterUI::cb_mSample_but(Fl_Light_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mSample_but_i(o,v);
}

inline void PhylterUI::cb_mBSpline_but_i(Fl_Light_Button* o, void* v) {
  BSpline_but_cb(o, v);
}
void PhylterUI::cb_mBSpline_but(Fl_Light_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mBSpline_but_i(o,v);
}

inline void PhylterUI::cb_mSplitSpline_but_i(Fl_Light_Button* o, void* v) {
  SplitSpline_but_cb(o, v);
}
void PhylterUI::cb_mSplitSpline_but(Fl_Light_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->parent()->user_data()))->cb_mSplitSpline_but_i(o,v);
}

inline void PhylterUI::cb_mReturn_key_but_i(Fl_Return_Button* o, void* v) {
  Return_key_but_cb(o, v);
}
void PhylterUI::cb_mReturn_key_but(Fl_Return_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mReturn_key_but_i(o,v);
}

inline void PhylterUI::cb_mCancel_key_but_i(Fl_Button* o, void* v) {
  Cancel_key_but_cb(o, v);
}
void PhylterUI::cb_mCancel_key_but(Fl_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mCancel_key_but_i(o,v);
}

inline void PhylterUI::cb_mSubdivide_but_i(Fl_Light_Button* o, void* v) {
  Subdivide_cb(o, v);
}
void PhylterUI::cb_mSubdivide_but(Fl_Light_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mSubdivide_but_i(o,v);
}

inline void PhylterUI::cb_mMinFrame_det_val_i(Fl_Value_Input* o, void* v) {
  MinFrame_det_cb(o, v);
}
void PhylterUI::cb_mMinFrame_det_val(Fl_Value_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mMinFrame_det_val_i(o,v);
}

inline void PhylterUI::cb_mEigen_det_val_i(Fl_Value_Input* o, void* v) {
  Eigen_det_cb(o, v);
}
void PhylterUI::cb_mEigen_det_val(Fl_Value_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mEigen_det_val_i(o,v);
}

inline void PhylterUI::cb_mDetectRange_det_val_i(Fl_Value_Input* o, void* v) {
  DetectRange_det_cb(o, v);
}
void PhylterUI::cb_mDetectRange_det_val(Fl_Value_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mDetectRange_det_val_i(o,v);
}

inline void PhylterUI::cb_mSlopeRange_det_val_i(Fl_Value_Input* o, void* v) {
  SlopeRange_det_cb(o, v);
}
void PhylterUI::cb_mSlopeRange_det_val(Fl_Value_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mSlopeRange_det_val_i(o,v);
}

inline void PhylterUI::cb_mMinFlight_det_val_i(Fl_Value_Input* o, void* v) {
  MinFlight_det_cb(o, v);
}
void PhylterUI::cb_mMinFlight_det_val(Fl_Value_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mMinFlight_det_val_i(o,v);
}

inline void PhylterUI::cb_mPosition_det_che_i(Fl_Check_Button* o, void* v) {
  Position_det_cb(o, v);
}
void PhylterUI::cb_mPosition_det_che(Fl_Check_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mPosition_det_che_i(o,v);
}

inline void PhylterUI::cb_mLineSlide_det_che_i(Fl_Check_Button* o, void* v) {
  LineSlide_det_cb(o, v);
}
void PhylterUI::cb_mLineSlide_det_che(Fl_Check_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mLineSlide_det_che_i(o,v);
}

inline void PhylterUI::cb_mPlaneSlide_det_che_i(Fl_Check_Button* o, void* v) {
  PlaneSlide_det_cb(o, v);
}
void PhylterUI::cb_mPlaneSlide_det_che(Fl_Check_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mPlaneSlide_det_che_i(o,v);
}

inline void PhylterUI::cb_mToe_det_che_i(Fl_Check_Button* o, void* v) {
  Toe_det_cb(o, v);
}
void PhylterUI::cb_mToe_det_che(Fl_Check_Button* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mToe_det_che_i(o,v);
}

inline void PhylterUI::cb_mMaxTranslation_det_val_i(Fl_Value_Input* o, void* v) {
  MaxTranslation_det_cb(o, v);
}
void PhylterUI::cb_mMaxTranslation_det_val(Fl_Value_Input* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mMaxTranslation_det_val_i(o,v);
}

inline void PhylterUI::cb_mGamma_ver_scr_i(Fl_Slider* o, void* v) {
  Gamma_ver_cb(o, v);
}
void PhylterUI::cb_mGamma_ver_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mGamma_ver_scr_i(o,v);
}

inline void PhylterUI::cb_mGamma_hor_scr_i(Fl_Slider* o, void* v) {
  Gamma_hor_cb(o, v);
}
void PhylterUI::cb_mGamma_hor_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mGamma_hor_scr_i(o,v);
}

inline void PhylterUI::cb_mLambda_hor_scr_i(Fl_Slider* o, void* v) {
  Lambda_hor_cb(o, v);
}
void PhylterUI::cb_mLambda_hor_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mLambda_hor_scr_i(o,v);
}

inline void PhylterUI::cb_mLambda_ver_scr_i(Fl_Slider* o, void* v) {
  Lambda_ver_cb(o, v);
}
void PhylterUI::cb_mLambda_ver_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mLambda_ver_scr_i(o,v);
}

inline void PhylterUI::cb_mAlpha_ver_scr_i(Fl_Slider* o, void* v) {
  Alpha_ver_cb(o, v);
}
void PhylterUI::cb_mAlpha_ver_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mAlpha_ver_scr_i(o,v);
}

inline void PhylterUI::cb_mAlpha_hor_scr_i(Fl_Slider* o, void* v) {
  Alpha_hor_cb(o, v);
}
void PhylterUI::cb_mAlpha_hor_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mAlpha_hor_scr_i(o,v);
}

inline void PhylterUI::cb_mBeta_hor_scr_i(Fl_Slider* o, void* v) {
  Beta_hor_cb(o, v);
}
void PhylterUI::cb_mBeta_hor_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mBeta_hor_scr_i(o,v);
}

inline void PhylterUI::cb_mBeta_ver_scr_i(Fl_Slider* o, void* v) {
  Beta_ver_cb(o, v);
}
void PhylterUI::cb_mBeta_ver_scr(Fl_Slider* o, void* v) {
  ((PhylterUI*)(o->parent()->user_data()))->cb_mBeta_ver_scr_i(o,v);
}

PhylterUI::PhylterUI() {
  Fl_Window* w;
  { Fl_Window* o = mFLWindow = new Fl_Window(975, 739, "Phylters");
    w = o;
    o->selection_color(15);
    o->labelcolor(15);
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 60, 560, 475);
      o->box(FL_DOWN_BOX);
      { Phylter_Fl_Gl_Window* o = mGLWindow = new Phylter_Fl_Gl_Window(0, 60, 560, 475);
        o->box(FL_DOWN_BOX);
        o->color(49);
        o->selection_color(49);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(56);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(560, 305, 410, 435);
      { Fl_Scroll* o = mFuncList_scr = new Fl_Scroll(770, 535, 200, 200);
        o->type(7);
        o->box(FL_DOWN_BOX);
        o->end();
      }
      { Fl_Scroll* o = mDofList_scr = new Fl_Scroll(560, 535, 210, 200);
        o->type(7);
        o->box(FL_DOWN_BOX);
        o->end();
      }
      { Fl_Scroll* o = mFpsScrollPane = new Fl_Scroll(560, 305, 410, 225);
        o->type(6);
        o->box(FL_DOWN_BOX);
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(0, 605, 560, 130);
      { Fl_Input* o = mCommandLine_inp = new Fl_Input(5, 610, 360, 30);
        o->labelsize(13);
        o->textsize(13);
        o->callback((Fl_Callback*)cb_mCommandLine_inp);
        o->when(FL_WHEN_ENTER_KEY|FL_WHEN_NOT_CHANGED);
      }
      { Fl_Browser* o = mGeneralInfo_out = new Fl_Browser(0, 645, 555, 90);
        o->box(FL_DOWN_BOX);
        o->labelsize(13);
        o->textsize(13);
      }
      { Fl_Progress* o = mProgress_pro = new Fl_Progress(365, 610, 190, 30);
        o->color(49);
        o->selection_color(15);
      }
      o->end();
    }
    { Fl_Value_Slider* o = mFrame_sli = new Fl_Value_Slider(45, 540, 335, 15, "Frame");
      o->type(5);
      o->selection_color(15);
      o->labelsize(12);
      o->labelcolor(15);
      o->step(1);
      o->textsize(9);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mFrame_sli);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = mBegin_sli = new Fl_Value_Slider(45, 565, 335, 15, "Begin");
      o->type(5);
      o->selection_color(9);
      o->labelsize(12);
      o->labelcolor(9);
      o->step(1);
      o->textsize(9);
      o->textcolor(9);
      o->callback((Fl_Callback*)cb_mBegin_sli);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = mEnd_sli = new Fl_Value_Slider(45, 590, 335, 15, "End");
      o->type(5);
      o->selection_color(9);
      o->labelsize(12);
      o->labelcolor(9);
      o->step(1);
      o->textsize(9);
      o->textcolor(9);
      o->callback((Fl_Callback*)cb_mEnd_sli);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = mLoop_but = new Fl_Button(385, 565, 65, 35, "LOOP");
      o->type(1);
      o->labelfont(1);
      o->labelsize(12);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mLoop_but);
    }
    { Fl_Counter* o = mFrameCounter_cou = new Fl_Counter(385, 540, 130, 25);
      o->labelsize(12);
      o->labelcolor(15);
      o->minimum(0);
      o->step(1);
      o->textsize(12);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mFrameCounter_cou);
      o->lstep(5);
    }
    { Fl_Button* o = mPlay_but = new Fl_Button(450, 565, 65, 35, "@>");
      o->labelfont(1);
      o->labelsize(20);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mPlay_but);
    }
    { Fl_Roller* o = mSpeed_rol = new Fl_Roller(520, 540, 35, 60);
      o->tooltip("Adjust playback speed");
      o->labelsize(12);
      o->labelcolor(15);
      o->minimum(0.01);
      o->step(0.01);
      o->value(0.07);
      o->callback((Fl_Callback*)cb_mSpeed_rol);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 975, 25);
      o->image(image_terminate);
      o->menu(menu_);
    }
    { Fl_Group* o = new Fl_Group(0, 25, 975, 35);
      { Fl_Button* o = mDefault_but = new Fl_Button(0, 25, 35, 35);
        o->tooltip("Load default model");
        o->box(FL_THIN_UP_BOX);
        o->image(image_default);
        o->callback((Fl_Callback*)cb_mDefault_but);
      }
      { Fl_Button* o = mModel_but = new Fl_Button(35, 25, 35, 35);
        o->tooltip("Load model");
        o->box(FL_THIN_UP_BOX);
        o->image(image_model);
        o->callback((Fl_Callback*)cb_mModel_but);
      }
      { Fl_Button* o = mMotion_but = new Fl_Button(70, 25, 35, 35);
        o->tooltip("Load keyframe");
        o->box(FL_THIN_UP_BOX);
        o->image(image_keyframe);
        o->callback((Fl_Callback*)cb_mMotion_but);
      }
      { Fl_Button* o = mConstr_but = new Fl_Button(105, 25, 35, 35);
        o->tooltip("Load constraints");
        o->box(FL_THIN_UP_BOX);
        o->image(image_constr);
        o->callback((Fl_Callback*)cb_mConstr_but);
      }
      { Fl_Button* o = mSaveMotion_but = new Fl_Button(140, 25, 35, 35);
        o->tooltip("Save keyframe");
        o->box(FL_THIN_UP_BOX);
        o->image(image_savekeyframe);
        o->callback((Fl_Callback*)cb_mSaveMotion_but);
      }
      { Fl_Button* o = mSaveConstr_but = new Fl_Button(175, 25, 35, 35);
        o->tooltip("Save constraints");
        o->box(FL_THIN_UP_BOX);
        o->image(image_saveconstr);
        o->callback((Fl_Callback*)cb_mSaveConstr_but);
      }
      { Fl_Button* o = mSelectKey_but = new Fl_Button(210, 25, 35, 35);
        o->tooltip("Select key");
        o->box(FL_THIN_UP_BOX);
        o->image(image_key);
        o->callback((Fl_Callback*)cb_mSelectKey_but);
      }
      { Fl_Button* o = mDeleteKey_but = new Fl_Button(245, 25, 35, 35);
        o->tooltip("Delete key");
        o->box(FL_THIN_UP_BOX);
        o->image(image_trash);
        o->callback((Fl_Callback*)cb_mDeleteKey_but);
      }
      { Fl_Button* o = mRecordMotion_but = new Fl_Button(280, 25, 35, 35);
        o->tooltip("Record motion");
        o->box(FL_THIN_UP_BOX);
        o->image(image_record);
        o->callback((Fl_Callback*)cb_mRecordMotion_but);
      }
      { Fl_Button* o = mStillShot_but = new Fl_Button(315, 25, 35, 35);
        o->tooltip("Still shot");
        o->box(FL_THIN_UP_BOX);
        o->image(image_still);
        o->callback((Fl_Callback*)cb_mStillShot_but);
      }
      { Fl_Button* o = mShowModel_but = new Fl_Button(350, 25, 35, 35);
        o->tooltip("Show model");
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->image(image_showmodel);
        o->callback((Fl_Callback*)cb_mShowModel_but);
      }
      { Fl_Button* o = mShowConstr_but = new Fl_Button(385, 25, 35, 35);
        o->tooltip("Show Constraints");
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->image(image_showconstr);
        o->callback((Fl_Callback*)cb_mShowConstr_but);
      }
      { Fl_Button* o = mShowMarker_but = new Fl_Button(420, 25, 35, 35);
        o->tooltip("Show Markers");
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->image(image_showmarker);
        o->callback((Fl_Callback*)cb_mShowMarker_but);
      }
      { Fl_Button* o = mInteract_but = new Fl_Button(455, 25, 35, 35);
        o->tooltip("Interactive mode");
        o->box(FL_THIN_UP_BOX);
        o->image(image_interactive);
        o->callback((Fl_Callback*)cb_mInteract_but);
      }
      { Fl_Button* o = mSpacetime_but = new Fl_Button(490, 25, 35, 35);
        o->tooltip("Solve spacetime");
        o->box(FL_THIN_UP_BOX);
        o->image(image_spacetime);
        o->callback((Fl_Callback*)cb_mSpacetime_but);
      }
      { Fl_Button* o = mTerminate_but = new Fl_Button(525, 25, 35, 35);
        o->tooltip("Terminate solver");
        o->box(FL_THIN_UP_BOX);
        o->image(image_terminate);
        o->callback((Fl_Callback*)cb_mTerminate_but);
      }
      { Fl_Button* o = mAbout_but = new Fl_Button(560, 25, 35, 35);
        o->tooltip("Estimate alpha");
        o->box(FL_THIN_UP_BOX);
        o->image(image_about);
        o->callback((Fl_Callback*)cb_mAbout_but);
      }
      { Fl_Menu_Button* o = mPhylterList = new Fl_Menu_Button(595, 25, 185, 35, "Phylter List     ");
        o->tooltip("Select phylters for spacetime");
        o->box(FL_THIN_UP_BOX);
        o->labelfont(1);
        o->labelcolor(15);
        o->menu(menu_mPhylterList);
      }
      { Fl_Menu_Button* o = mFileList = new Fl_Menu_Button(780, 25, 195, 35, "File List     ");
        o->box(FL_THIN_UP_BOX);
        o->labelfont(1);
        o->labelcolor(15);
        o->textsize(13);
        o->textcolor(15);
        o->callback((Fl_Callback*)cb_mFileList);
      }
      o->resizable(NULL);
      o->end();
    }
    { Fl_Group* o = new Fl_Group(560, 60, 415, 245);
      o->box(FL_DOWN_BOX);
      { AnalyzerWindow* o = mGraphWindow = new AnalyzerWindow(562, 62, 413, 243);
        o->box(FL_NO_BOX);
        o->color(49);
        o->selection_color(49);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(56);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Window* o = mAboutWindow = new Fl_Window(282, 225, "About Phylters");
    w = o;
    o->user_data((void*)(this));
    new Fl_Box(15, 15, 95, 100);
    { Fl_Output* o = mAbout_text_out = new Fl_Output(125, 20, 140, 155);
      o->type(12);
      o->box(FL_THIN_DOWN_BOX);
      o->color(50);
      o->labelsize(13);
      o->labelcolor(15);
      o->textcolor(15);
    }
    { Fl_Return_Button* o = mReturn_abt_but = new Fl_Return_Button(200, 190, 65, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mReturn_abt_but);
    }
    o->end();
  }
  { Fl_Window* o = mContentWindow = new Fl_Window(741, 597, "Help");
    w = o;
    o->user_data((void*)(this));
    mHelpView = new Fl_Help_View(5, 5, 730, 550);
    { Fl_Return_Button* o = new Fl_Return_Button(675, 565, 60, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_OK);
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
}

void PhylterUI::Show() {
  mFLWindow->show();
mGLWindow->show();
if(PhyltersBox::mData->mKeyframeData)
	mGraphWindow->show();
}

void PhylterUI::CreateDofSliderWindow() {
  Fl_Window* w;
  { Fl_Window* o = mDofSliderWindow = new Fl_Window(383, 612, "Joint Angles");
    w = o;
    o->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 380, 610);
      o->box(FL_THIN_DOWN_BOX);
      o->labelsize(13);
      InitSliders();
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}

Fl_Window* PhylterUI::CreateKeyframeSettingWindow() {
  Fl_Window* w;
  { Fl_Window* o = mKeyframeSetWindow = new Fl_Window(277, 166, "Keyframe Setting");
    w = o;
    o->user_data((void*)(this));
    { Fl_Input* o = mFrames_inp = new Fl_Input(70, 10, 45, 25, "Frames:");
      o->tooltip("Input the number of frames of the animation");
      o->type(2);
      o->box(FL_THIN_DOWN_BOX);
      o->labelcolor(15);
      o->textcolor(15);
    }
    { Fl_Input* o = mTime_inp = new Fl_Input(205, 10, 45, 25, "Seconds:");
      o->type(1);
      o->box(FL_THIN_DOWN_BOX);
      o->labelcolor(15);
      o->textcolor(15);
    }
    { Fl_Group* o = new Fl_Group(10, 45, 145, 50);
      { Fl_Light_Button* o = mSample_but = new Fl_Light_Button(10, 45, 70, 25, "Samples");
        o->type(102);
        o->box(FL_THIN_UP_BOX);
        o->selection_color(9);
        o->labelsize(13);
        o->labelcolor(15);
        o->callback((Fl_Callback*)cb_mSample_but);
      }
      { Fl_Light_Button* o = mBSpline_but = new Fl_Light_Button(80, 45, 70, 25, "BSplines");
        o->type(102);
        o->box(FL_THIN_UP_BOX);
        o->value(1);
        o->selection_color(9);
        o->labelsize(13);
        o->labelcolor(15);
        o->callback((Fl_Callback*)cb_mBSpline_but);
      }
      { Fl_Light_Button* o = mSplitSpline_but = new Fl_Light_Button(10, 70, 90, 25, "Split Spline");
        o->type(102);
        o->box(FL_THIN_UP_BOX);
        o->selection_color(9);
        o->labelcolor(15);
        o->callback((Fl_Callback*)cb_mSplitSpline_but);
      }
      o->end();
    }
    { Fl_Input* o = mContPoint_inp = new Fl_Input(205, 55, 45, 25, "Points:");
      o->type(2);
      o->box(FL_THIN_DOWN_BOX);
      o->labelcolor(15);
      o->textcolor(15);
      mContPoint_inp->value("15");
    }
    { Fl_Return_Button* o = mReturn_key_but = new Fl_Return_Button(100, 130, 75, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mReturn_key_but);
    }
    { Fl_Button* o = mCancel_key_but = new Fl_Button(180, 130, 70, 25, "Cancel");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mCancel_key_but);
    }
    { Fl_Light_Button* o = mSubdivide_but = new Fl_Light_Button(10, 95, 70, 25, "Subdivide");
      o->box(FL_THIN_UP_BOX);
      o->selection_color(10);
      o->labelsize(13);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mSubdivide_but);
      o->deactivate();
    }
    o->end();
  }
  return w;
}

Fl_Window* PhylterUI::CreateDetectorWindow() {
  Fl_Window* w;
  { Fl_Window* o = mDetectionWindow = new Fl_Window(318, 186, "Constraint Detection");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = mMinFrame_det_val = new Fl_Value_Input(125, 10, 55, 20, "Min frames:");
      o->tooltip("Minimal frames for each constraint");
      o->labelcolor(15);
      o->minimum(3);
      o->maximum(10);
      o->step(1);
      o->value(5);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mMinFrame_det_val);
    }
    { Fl_Value_Input* o = mEigen_det_val = new Fl_Value_Input(125, 110, 55, 20, "Eigen range:");
      o->tooltip("Not used right now.");
      o->labelcolor(15);
      o->maximum(0.1);
      o->step(0.001);
      o->value(0.03);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mEigen_det_val);
    }
    { Fl_Value_Input* o = mDetectRange_det_val = new Fl_Value_Input(125, 70, 55, 20, "Detection range:");
      o->tooltip("Allowable error when detecting primative intersections.");
      o->labelcolor(15);
      o->maximum(2);
      o->step(0.001);
      o->value(0.1);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mDetectRange_det_val);
    }
    { Fl_Value_Input* o = mSlopeRange_det_val = new Fl_Value_Input(125, 90, 55, 20, "Slope Range:");
      o->tooltip("Not used right now.");
      o->labelcolor(15);
      o->maximum(0.1);
      o->step(0.0001);
      o->value(0.001);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mSlopeRange_det_val);
    }
    { Fl_Value_Input* o = mMinFlight_det_val = new Fl_Value_Input(125, 30, 55, 20, "Min flight phase::");
      o->tooltip("Minimal frame required for flight phase");
      o->labelcolor(15);
      o->minimum(3);
      o->maximum(30);
      o->step(1);
      o->value(8);
      o->textcolor(15);
      o->callback((Fl_Callback*)cb_mMinFlight_det_val);
    }
    { Fl_Check_Button* o = mPosition_det_che = new Fl_Check_Button(200, 10, 100, 25, "Position");
      o->tooltip("Detect positional constraints");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->selection_color(15);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mPosition_det_che);
    }
    { Fl_Check_Button* o = mLineSlide_det_che = new Fl_Check_Button(200, 35, 100, 25, "Line sliding");
      o->tooltip("Detect line sliding constraints");
      o->down_box(FL_DOWN_BOX);
      o->selection_color(15);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mLineSlide_det_che);
    }
    { Fl_Check_Button* o = mPlaneSlide_det_che = new Fl_Check_Button(200, 60, 100, 25, "Plane sliding");
      o->tooltip("Detect plane sliding constraints");
      o->down_box(FL_DOWN_BOX);
      o->selection_color(15);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mPlaneSlide_det_che);
    }
    { Fl_Return_Button* o = mReturn_det_but = new Fl_Return_Button(155, 145, 70, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Button* o = mCancel_det_but = new Fl_Button(230, 145, 70, 25, "Cancel");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Check_Button* o = mToe_det_che = new Fl_Check_Button(200, 85, 100, 25, "Toe position");
      o->tooltip("Move constraints to toes when takeoff");
      o->down_box(FL_DOWN_BOX);
      o->selection_color(15);
      o->labelcolor(15);
      o->callback((Fl_Callback*)cb_mToe_det_che);
    }
    { Fl_Light_Button* o = mSoftConstr_det_but = new Fl_Light_Button(15, 145, 45, 25, "Soft");
      o->tooltip("Set to soft constraints");
      o->box(FL_THIN_UP_BOX);
      o->selection_color(9);
      o->labelcolor(15);
    }
    { Fl_Value_Input* o = mMaxTranslation_det_val = new Fl_Value_Input(125, 50, 55, 20, "Max Translation:");
      o->tooltip("Maximum translation allowed when detecting a plane constraint.");
      o->maximum(0.01);
      o->step(0.0001);
      o->value(0.005);
      o->callback((Fl_Callback*)cb_mMaxTranslation_det_val);
    }
    o->end();
  }
  return w;
}

Fl_Window* PhylterUI::CreatePostureWindow() {
  Fl_Window* w;
  { Fl_Window* o = mPostureWindow = new Fl_Window(338, 176, "Poseture Editing");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 25, 115, 95, "Constraints");
      o->box(FL_ENGRAVED_BOX);
      o->labelcolor(15);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Check_Button* o = new Fl_Check_Button(20, 35, 100, 25, "Upper COM");
        o->tooltip("COM for upper body");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->selection_color(15);
        o->labelcolor(15);
      }
      { Fl_Check_Button* o = new Fl_Check_Button(20, 60, 100, 25, "Lower COM");
        o->tooltip("COM for lower body");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->selection_color(15);
        o->labelcolor(15);
      }
      { Fl_Check_Button* o = new Fl_Check_Button(20, 85, 100, 20, "Arm COM");
        o->tooltip("COM for of two arms");
        o->down_box(FL_DOWN_BOX);
        o->selection_color(15);
        o->labelcolor(15);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(135, 25, 195, 95, "Objective function");
      o->box(FL_ENGRAVED_BOX);
      o->labelcolor(15);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Value_Slider* o = new Fl_Value_Slider(145, 50, 175, 15, "Min mass");
        o->tooltip("Weight for minimizing mass displacement");
        o->type(1);
        o->labelcolor(15);
        o->textcolor(15);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Value_Slider* o = new Fl_Value_Slider(145, 85, 175, 15, "Joint angle");
        o->tooltip("Weight for minimizing joint difference");
        o->type(1);
        o->labelcolor(15);
        o->textcolor(15);
        o->align(FL_ALIGN_TOP);
      }
      o->end();
    }
    { Fl_Return_Button* o = mReturn_pos_but = new Fl_Return_Button(175, 140, 75, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Button* o = mCancel_pos_but = new Fl_Button(255, 140, 75, 25, "Cancel");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Light_Button* o = mSoftConstr_pos_but = new Fl_Light_Button(10, 140, 45, 25, "Soft");
      o->tooltip("Set to soft constraints");
      o->box(FL_THIN_UP_BOX);
      o->value(1);
      o->selection_color(9);
      o->labelcolor(15);
    }
    o->end();
  }
  return w;
}

Fl_Window* PhylterUI::CreateLinMomentWindow() {
  Fl_Window* w;
  { Fl_Window* o = mLinWindow = new Fl_Window(247, 177, "Linear Momentum");
    w = o;
    o->user_data((void*)(this));
    { Fl_Slider* o = mGamma_ver_scr = new Fl_Slider(145, 40, 15, 75, "First vertical");
      o->tooltip("Vertical position of the first control point");
      o->labelsize(13);
      o->labelcolor(15);
      o->minimum(-10);
      o->maximum(10);
      o->callback((Fl_Callback*)cb_mGamma_ver_scr);
      o->align(129);
    }
    { Fl_Slider* o = mGamma_hor_scr = new Fl_Slider(20, 40, 85, 15, "First horizotal:");
      o->tooltip("Horizontal position of the first control point");
      o->type(1);
      o->labelsize(13);
      o->labelcolor(15);
      o->value(0.4);
      o->callback((Fl_Callback*)cb_mGamma_hor_scr);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Slider* o = mLambda_hor_scr = new Fl_Slider(20, 75, 85, 15, "Second horizotal:");
      o->tooltip("Horizontal position of the second control point");
      o->type(1);
      o->labelsize(13);
      o->labelcolor(15);
      o->value(0.85);
      o->callback((Fl_Callback*)cb_mLambda_hor_scr);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Slider* o = mLambda_ver_scr = new Fl_Slider(190, 40, 15, 75, "Second vertical");
      o->tooltip("Vertical position of the second control point");
      o->labelsize(13);
      o->labelcolor(15);
      o->minimum(-10);
      o->maximum(10);
      o->callback((Fl_Callback*)cb_mLambda_ver_scr);
      o->align(129);
    }
    { Fl_Return_Button* o = mReturn_lin_but = new Fl_Return_Button(95, 140, 70, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Button* o = mCancel_lin_but = new Fl_Button(170, 140, 70, 25, "Cancel");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Light_Button* o = mSoftConstr_lin_but = new Fl_Light_Button(20, 140, 45, 25, "Soft");
      o->tooltip("Set to soft constraints");
      o->box(FL_THIN_UP_BOX);
      o->selection_color(9);
      o->labelcolor(15);
    }
    o->end();
  }
  return w;
}

Fl_Window* PhylterUI::CreateAngMomentWindow() {
  Fl_Window* w;
  { Fl_Window* o = mAngWindow = new Fl_Window(247, 177, "Angular Momentum");
    w = o;
    o->user_data((void*)(this));
    { Fl_Slider* o = mAlpha_ver_scr = new Fl_Slider(145, 40, 15, 75, "First vertical");
      o->tooltip("Vertical position of the first control point");
      o->labelsize(13);
      o->labelcolor(15);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_mAlpha_ver_scr);
      o->align(129);
    }
    { Fl_Slider* o = mAlpha_hor_scr = new Fl_Slider(20, 40, 85, 15, "First horizotal:");
      o->tooltip("Horizontal position of the first control point");
      o->type(1);
      o->labelsize(13);
      o->labelcolor(15);
      o->value(0.4);
      o->callback((Fl_Callback*)cb_mAlpha_hor_scr);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Slider* o = mBeta_hor_scr = new Fl_Slider(20, 75, 85, 15, "Second horizotal:");
      o->tooltip("Horizontal position of the second control point");
      o->type(1);
      o->labelsize(13);
      o->labelcolor(15);
      o->value(0.85);
      o->callback((Fl_Callback*)cb_mBeta_hor_scr);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Slider* o = mBeta_ver_scr = new Fl_Slider(190, 40, 15, 75, "Second vertical");
      o->tooltip("Vertical position of the second control point");
      o->labelsize(13);
      o->labelcolor(15);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_mBeta_ver_scr);
      o->align(129);
    }
    { Fl_Return_Button* o = mReturn_ang_but = new Fl_Return_Button(95, 140, 70, 25, "OK");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Button* o = mCancel_ang_but = new Fl_Button(170, 140, 70, 25, "Cancel");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor(15);
    }
    { Fl_Light_Button* o = mSoftConstr_ang_but = new Fl_Light_Button(20, 140, 45, 25, "Soft");
      o->tooltip("Set to soft constraints");
      o->box(FL_THIN_UP_BOX);
      o->selection_color(9);
      o->labelcolor(15);
    }
    o->end();
  }
  return w;
}

void PhylterUI::InitKeyframeSetting() {
  if(PhyltersBox::mData->mKeyframeData){
	char buffer[20];
	int frame = PhyltersBox::mData->mKeyframeData->GetFrameCount();
	_itoa(frame, buffer, 10);
	mFrames_inp->value(buffer);
	double time = frame / PhyltersBox::mData->mFPS;
	_gcvt(time, 3, buffer);
	mTime_inp->value(buffer);
}
}

void PhylterUI::InitSliders() {
  int nDof = PhyltersBox::mData->mModel->GetDofCount();
int yPos = 10;
for(int i = 0; i < nDof; i++){
	Dof *currDof = PhyltersBox::mData->mModel->GetDofs().GetDof(i);
	Fl_Value_Slider *o = new Fl_Value_Slider(110, yPos, 250, 15, currDof->GetName());
	o->type(1);
	o->selection_color(15);
	o->labelsize(13);
	o->labelcolor(15);
	o->maximum(PhyltersBox::mData->mModel->GetDofs().GetDof(i)->GetMax());
	o->minimum(PhyltersBox::mData->mModel->GetDofs().GetDof(i)->GetMin());
	o->align(FL_ALIGN_LEFT);
	o->callback((Fl_Callback*)DofSliders_cb, (void*)(i));
	mDofs_sli.push_back(o);
	yPos += 20;
}

int height = 610;
if(yPos + 10 < height)
	height = yPos + 10;
mDofSliderWindow->resize(100, 100, 380, height);
}

void PhylterUI::InitControlPanel() {
  mFrame_sli->range(0, PhyltersBox::mData->mKeyframeData->GetFrameCount() - 1);
mFrame_sli->value(0);
mBegin_sli->range(0, PhyltersBox::mData->mKeyframeData->GetFrameCount() - 1);
mBegin_sli->value(0);
mEnd_sli->range(0, PhyltersBox::mData->mKeyframeData->GetFrameCount() - 1);
mEnd_sli->value(PhyltersBox::mData->mKeyframeData->GetFrameCount() - 1);
mFrameCounter_cou->value(0);
mFrameCounter_cou->maximum(PhyltersBox::mData->mKeyframeData->GetFrameCount() - 1);
mPlay_but->label("@>");
mLoop_but->value(0);
}

void PhylterUI::InitFileList() {
  char *name;
char *root;
int colorArray[] = {4, 171, 1, 192, 90};

name = strrchr(PhyltersBox::mData->mKeyframeData->mFilename, '/');
if(!name){
	root = new char[3];
	strcpy(root, "./");
	root[2] = '\0';
	name = PhyltersBox::mData->mKeyframeData->mFilename - 1;
}else{
	int firstSlashPos = name - PhyltersBox::mData->mKeyframeData->mFilename + 1;
		
	root = new char[firstSlashPos + 1];
	strncpy(root, PhyltersBox::mData->mKeyframeData->mFilename, firstSlashPos);
	root[firstSlashPos] = '\0';
}

fl_filename_list(root, &mList);
int i = 2;

while(mList[i]){
	mFileList->add(mList[i]->d_name, 0, 0, 0, 2);
	char *fullName = new char[strlen(root) + strlen(mList[i]->d_name) + 1];
	strcpy(fullName, root);
	strcat(fullName, mList[i]->d_name);
			
	if(strcmp(mList[i]->d_name, name + 1) == 0){
		mFileList->mode(i - 2, 6);
		DofFileInfo *openFile = new DofFileInfo(fullName);
		openFile->mIndexOnList = i - 2;
		mGraphWindow->mOpenedDofFiles.push_back(openFile);
		mGraphWindow->mDefaultFile = mGraphWindow->mOpenedDofFiles.size() - 1;
	}
	i++;
	delete [] fullName;
}
delete [] root;
}

void PhylterUI::InitFuncList() {
  int yPos = 0;
for(int i = 0; i < TOTAL_FUNCS; i++){
	Fl_Check_Button* o = new Fl_Check_Button(730, 305 + yPos, 125, 12, FunctionName[i]);
	o->selection_color(15);
	o->labelcolor(15);
	o->labelsize(12);
	o->callback((Fl_Callback*)FuncList_but_cb, (void*)(i));
	yPos += 15;
	mFuncList_scr->add(o);
}
}

void PhylterUI::InitDofList() {
  int nDof = PhyltersBox::mData->mModel->GetDofCount();
int yPos = 0;
for(int i = 0; i < nDof; i++){
	Fl_Check_Button* o = new Fl_Check_Button(570, 305 + yPos, 125, 12, PhyltersBox::mData->mModel->GetDofs().GetDof(i)->GetName());
	o->selection_color(15);
	o->labelcolor(15);
	o->labelsize(12);
	o->callback((Fl_Callback*)DofList_but_cb, (void*)(i));
	yPos += 15;
	mDofList_scr->add(o);
}
}

void PhylterUI::DeleteSliderWindow() {
  if(mDofSliderWindow->shown())
	mDofSliderWindow->hide();
int nDof = PhyltersBox::mData->mModel->GetDofCount();
for(int i = nDof - 1; i >= 0; i--)
	delete mDofs_sli[i];
mDofs_sli.clear();

//delete mDofSliderWindow;
}

void PhylterUI::DeleteKeyframeSettingWindow() {
  if(mKeyframeSetWindow->shown())
	mKeyframeSetWindow->hide();

delete mFrames_inp;
delete mTime_inp;
delete mSample_but;
delete mBSpline_but;
delete mContPoint_inp;
delete mReturn_key_but;
delete mCancel_key_but;
}

void PhylterUI::DeleteFileList() {
  mFileList->clear();
}

void PhylterUI::DeleteFuncList() {
  int size = mFuncList_scr->children();

for(int i = size - 3; i >= 0; i--){
	Fl_Widget *item = mFuncList_scr->child(i);
	mFuncList_scr->remove(item);
}
}

void PhylterUI::DeleteDofList() {
  int size = mDofList_scr->children();

for(int i = size - 3; i >= 0; i--){
	Fl_Widget *item = mDofList_scr->child(i);
	mDofList_scr->remove(item);
}
}

void PhylterUI::InitFpsSliders() {
  std::vector<GeneralSeg*> & genSegs = PhyltersBox::mData->mGenSegments;
mFpsScrollPane->hide();

//remove old ones
for(int i = 0;i<mFPS_count.size();i++){
	mFpsScrollPane->remove(*mFPS_count[i]);
	delete mFPS_count[i];
}
mFPS_count.clear();

unsigned int color;
int counterHeight  = 20;
mFpsScrollPane->begin();
int packWidth     = 150;
int x = mFpsScrollPane->x() + 20;
int y = mFpsScrollPane->y()+ 20;
for(int i = 0;i< genSegs.size();i++){
	genSegs[i]->name = new char[25];
	if(i%2){
		color = 9;
		sprintf(genSegs[i]->name,"Flight Stage %d",(i-1)/2);
	}else{
		color = 15;
		sprintf(genSegs[i]->name,"Ground Stage %d",i/2);
	}
	Fl_Counter *counter = new Fl_Counter(x, y, packWidth, counterHeight,genSegs[i]->name);
        counter->minimum(3);
        counter->step(1);
		counter->lstep(5);
		counter->labelcolor(color);
		counter->textcolor(color);
        counter->value(genSegs[i]->endFrame - genSegs[i]->startFrame);
		counter->callback((Fl_Callback*)FpsCounters_cb, (void*)(i));
		counter->align(FL_ALIGN_TOP);

	counter->show();
	mFPS_count.push_back(counter);
	y += counterHeight+ 20;

}
mFpsScrollPane->end();
mFpsScrollPane->show();
mFpsScrollPane->redraw();
mGraphWindow->redraw();
}
