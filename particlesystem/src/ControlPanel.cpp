// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "ControlPanel.h"

inline void ControlPanel::cb_mFrame_sli_i(fltk::ValueSlider* o, void*) {
  int current = (int)o->value();
  if( current > getEnd() )
  	current = getEnd();
  if( current < getBegin() )
  	current = getBegin();
  o->value( current );
  o->selection_color(15);
  o->textcolor(15);
  o->labelcolor(15);
}
void ControlPanel::cb_mFrame_sli(fltk::ValueSlider* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mFrame_sli_i(o,v);
}

inline void ControlPanel::cb_mBegin_sli_i(fltk::ValueSlider* o, void*) {
  int val = (int)o->value();
  if( val > getEnd() ){
  	val = getEnd();
  }
  else if ( val > getCurrentFrame() ){
  	mFrame_sli->value(val);
  	mFrame_sli->selection_color(15);
  	mFrame_sli->textcolor(15);
  	mFrame_sli->labelcolor(15);
  }
  o->value(val);
}
void ControlPanel::cb_mBegin_sli(fltk::ValueSlider* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mBegin_sli_i(o,v);
}

inline void ControlPanel::cb_mEnd_sli_i(fltk::ValueSlider* o, void*) {
  int val = (int)o->value();
  if( val < getBegin() ){
  	val = getBegin();
  }
  else if( val < getCurrentFrame() ){
  	mFrame_sli->value(val);		
  	mFrame_sli->selection_color(15);
  	mFrame_sli->textcolor(15);
  	mFrame_sli->labelcolor(15);
  }
  o->value(val);
}
void ControlPanel::cb_mEnd_sli(fltk::ValueSlider* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mEnd_sli_i(o,v);
}

inline void ControlPanel::cb_mPlay_but_i(fltk::Button*, void*) {
  mPlaying = !mPlaying;
  if(mPlaying)
  	mPlay_but->label("@||");
  else
  	mPlay_but->label("@>");
}
void ControlPanel::cb_mPlay_but(fltk::Button* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mPlay_but_i(o,v);
}

inline void ControlPanel::cb_mForward_but_i(fltk::Button*, void*) {
  advanceFrame((int)mFrameStep_inp->value());
}
void ControlPanel::cb_mForward_but(fltk::Button* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mForward_but_i(o,v);
}

inline void ControlPanel::cb_mBackward_but_i(fltk::Button*, void*) {
  decrementFrame((int)mFrameStep_inp->value());
}
void ControlPanel::cb_mBackward_but(fltk::Button* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mBackward_but_i(o,v);
}

inline void ControlPanel::cb_mForward_butP_i(fltk::Button*, void*) {
  advanceFrame((int)mFrameStep_inp->value());	
  //add 1 to numparts
}
void ControlPanel::cb_mForward_butP(fltk::Button* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mForward_butP_i(o,v);
}

inline void ControlPanel::cb_mBackward_butP_i(fltk::Button*, void*) {
  decrementFrame((int)mFrameStep_inp->value());	
  //decrease 1 to numparts
}
void ControlPanel::cb_mBackward_butP(fltk::Button* o, void* v) {
  ((ControlPanel*)(o->parent()->user_data()))->cb_mBackward_butP_i(o,v);
}

void ControlPanel::setRange(int _maxFrame) {
  mFrame_sli->range(0, _maxFrame);
  mBegin_sli->range(0, _maxFrame);
  mBegin_sli->value(0);
  mEnd_sli->range(0, _maxFrame);
  mEnd_sli->value(_maxFrame);
  //mFrameCounter_inp->maximum(_maxFrame);
  if(mFrame_sli->value()>_maxFrame){
  	mFrame_sli->value(_maxFrame);
  	//mFrameCounter_cou->value(_maxFrame);
  }
  mControlWindow->redraw();
}

ControlPanel::ControlPanel() {
  fltk::DoubleBufferWindow* w;
   {fltk::DoubleBufferWindow* o = mControlWindow = new fltk::DoubleBufferWindow(0, 582, 1600, 105);
    w = o;
    o->type(241);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::ValueSlider* o = mFrame_sli = new fltk::ValueSlider(47, 7, 455, 18, "Frame");
      o->type(fltk::ValueSlider::TICK_ABOVE);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->labelsize(13);
      o->maximum(0);
      o->step(1);
      o->callback((fltk::Callback*)cb_mFrame_sli);
      o->align(fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_CHANGED);
    }
     {fltk::ValueSlider* o = mBegin_sli = new fltk::ValueSlider(47, 35, 455, 18, "Begin");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->color((fltk::Color)0xff6c5b00);
      o->labelsize(13);
      o->textsize(9);
      o->maximum(0);
      o->step(1);
      o->callback((fltk::Callback*)cb_mBegin_sli);
      o->align(fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_CHANGED);
    }
     {fltk::ValueSlider* o = mEnd_sli = new fltk::ValueSlider(47, 55, 455, 18, "End");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->color((fltk::Color)0x79ff8800);
      o->labelsize(13);
      o->textsize(9);
      o->maximum(0);
      o->step(1);
      o->callback((fltk::Callback*)cb_mEnd_sli);
      o->align(fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_CHANGED);
    }
     {fltk::Button* o = mLoop_but = new fltk::Button(509, 61, 55, 40, "LOOP");
      o->type(fltk::Button::TOGGLE);
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->color((fltk::Color)0xece9d800);
      o->selection_color((fltk::Color)0x8099ff00);
      o->selection_textcolor((fltk::Color)56);
      o->highlight_color((fltk::Color)0xece9d800);
      o->tooltip("Loop the playback");
    }
     {fltk::Button* o = mPlay_but = new fltk::Button(570, 61, 50, 40, "@->");
      o->type(fltk::Button::TOGGLE);
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->color((fltk::Color)0xece9d800);
      o->selection_color((fltk::Color)0xece9d800);
      o->selection_textcolor((fltk::Color)56);
      o->labelsize(20);
      o->callback((fltk::Callback*)cb_mPlay_but);
      o->tooltip("Play/Pause");
    }
     {fltk::ValueInput* o = mFrameStep_inp = new fltk::ValueInput(591, 31, 30, 28, "Step");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->minimum(1);
      o->maximum(10);
      o->step(1);
      o->value(1);
      o->when(fltk::WHEN_CHANGED);
      o->value(1);
    }
	 {fltk::ValueInput* o = mPartCount_inp = new fltk::ValueInput(670, 31, 35, 28, "# parts");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->minimum(10);
      o->maximum(1000);
      o->step(10);
      o->value(50);
      o->when(fltk::WHEN_CHANGED);
      o->value(50);
    }
     {fltk::Button* o = mForward_but = new fltk::Button(590, 9, 30, 16, "@>");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->callback((fltk::Callback*)cb_mForward_but);
    }
     {fltk::Button* o = mBackward_but = new fltk::Button(558, 9, 31, 16, "@<");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->callback((fltk::Callback*)cb_mBackward_but);
    }
     {fltk::Button* o = mForward_butP = new fltk::Button(699, 9, 30, 16, ">");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->callback((fltk::Callback*)cb_mForward_butP);
    }
     {fltk::Button* o = mBackward_butP = new fltk::Button(667, 9, 31, 16, "<");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->callback((fltk::Callback*)cb_mBackward_butP);
    }

     {fltk::ValueSlider* o = mSpeed_rol = new fltk::ValueSlider(47, 82, 455, 18, "FPS");
      o->box(fltk::PLASTIC_UP_BOX);
      o->buttonbox(fltk::PLASTIC_UP_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->color((fltk::Color)0x8099ff00);
      o->labelsize(13);
      o->minimum(5);
      o->maximum(150);
      o->step(1);
      o->value(120);
      o->align(fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_CHANGED);
      o->tooltip("Adjust playback speed");
    }
    o->end();
    o->clear_border();
    o->resizable(o);
    
  }
  mPlaying=false;
}

//return data entry value for number of particles
int ControlPanel::getCurPartCount(){ return (int)mPartCount_inp->value();}

void ControlPanel::advanceFrame(int _step) {
  int val = (int)mFrame_sli->value() + _step;// (int)mFrameStep_inp->value();
  if( val >= getEnd() ){
  	val = getBegin();
  	if( !isLooping() ){
  		mPlaying = false;
  		mPlay_but->label("@>");
  	}
  }
  mFrame_sli->value( val );
  //mFrameCounter_inp->value( val );
}

void ControlPanel::decrementFrame(int _step) {
  int val = (int)mFrame_sli->value() - _step;//(int)mFrameStep_inp->value();
  if( val < getBegin() ){
  	val = getBegin();
  	if( !isLooping() ){
  		mPlaying = false;
  		mPlay_but->label("@>");
  	}
  }
  mFrame_sli->value( val );
  //mFrameCounter_inp->value( val );
}

int ControlPanel::getCurrentFrame() {
  return (int)mFrame_sli->value();
}

void ControlPanel::setCurrentFrame(int _f) {
  if( _f>=getEnd() ){
  		_f = getBegin();
  		if( !isLooping() ){
  			mPlaying = false;
  			mPlay_but->label("@>");
  		}
  	}
  	mFrame_sli->value( _f );
  	//mFrameCounter_inp->value( val );
}

int ControlPanel::getMaxFrame() {
  return (int)mFrame_sli->maximum();
}

int ControlPanel::getBegin() {
  return (int)mBegin_sli->value();
}

int ControlPanel::getEnd() {
  return (int)mEnd_sli->value();
}

double ControlPanel::getSpeed() {
  return (double)1.0/mSpeed_rol->value();
}

bool ControlPanel::isLooping() {
  if((int)mLoop_but->value()==1) return true; else return false;
}

bool ControlPanel::isPlaying() {
  return mPlaying;
}
